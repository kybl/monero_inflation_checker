import nacl.bindings
from df25519 import (
    Scalar,
    Point,
    ScalarVector,
    PointVector,
    random_scalar,
    random_point,
    hash_to_scalar,
    hash_to_point,
    cn_fast_hash,
)
import df25519
import ipdb;
import time
import binascii
import varint_mic as varint



# sk = df25519.random_scalar()

# r1 = dumber25519.Scalar('21ab1f46a2c7efd314349640f585c3fd4fbe71d92a8b58aa092d20db72b25c00')

# skb = bytes.fromhex('21ab1f46a2c7efd314349640f585c3fd4fbe71d92a8b58aa092d20db72b25c00')

str_hex = '21ab1f46a2c7efd314349640f585c3fd4fbe71d92a8b58aa092d20db72b25c00'

rb = df25519.Scalar(str_hex)

domain = str("bulletproof")
Pi = hash_to_point(cn_fast_hash(str(df25519.H) + domain.encode("utf-8").hex() + varint.encode_as_varint(4)))
# Hi = Point()

t1 = time.time()
rb = df25519.Scalar('21ab1f46a2c7efd314349640f585c3fd4fbe71d92a8b58aa092d20db72b25c00')
P = df25519.Scalar(8)*df25519.G
t2 = time.time()


PC = rb*df25519.G + rb*df25519.G + rb*(df25519.G-P)
print("PC = "+ str(PC))

print("Total time 1 mult: " + str(t2-t1))


tag = "1"
ls = '434c5341475f726f756e64000000000000000000000000000000000000000000c3aec646609114ab73d1fe4a9e4e53afea4c45c913513a796369c1d3c890c5f36430074a83b834cff7302253c10bbb3319e45cc9cefff3d62f5d209abe090edd171ee7d6af0df9fe2cb17fd99d4d45ceb68f1b28474547b592e86693977bf6a4c6aaac5c4cf689c2a4c32d1ff496011f5a412575f8a0ef06b333eb7d5803d73e81728f03c9ce53844c28200071a38ffc82bf3235e7d0fae161b841fb47acd44ec45a333a82cd9d5b91e9cd9b687856fa98f6c8f4c9b9f5186fe545192e121ef87aa59545acf057b0b94e25f495453819a426cca97645a18b21d450fa04e9f749390ead8cbe4910b1af2229c956dace85da17414db1fcbaef7817f30e07c6d20857f5a3c9d5eb9cb96b7f3d0eb561ad89ee6965ee7996a329a9b7b737355ecfe47b20ad0f25783f7280ae077cffbcfd290e24c7723a7ed5ce874a0232e60b9e8eae781c502340bc05f8641d02a5d0fe2db2c8e505ae0a52be374e1218eec4e538a490574db20f3e1e57c74df5921224ae172f6aa3872e4adb217e262f8886e4f01a3027292fc5e0a491dba7b190f53cadf88dc2d8d2253b6b2c020c63302a4f975d0c018d08da79dcd83c9eb8af9db6afd7e78cf41805221498b7962ea33fea00ad2af6aaa09af22db438a7f25174253c2ca51f341e18e8906539f0a875cdb8d842d83f8a125d3825d5447a8384825553a4500defba3d7b312266975890e65e006c546b93202a8f37b8e86303e2de02aace7f053451107be9fea8c60d5cb89d0be12921e1b74a7a449297e964629226be091d279d90c8bb26eeb32a3177f19bf701f7bf22602ddbefbab3bc9199a60203f95e5fdf5f082cbe9ff951a55ee8f3a1c5c274d199f31e6e95d2f1ee638de70b399238d8fb85dd80a72b9a5e05d18bed73934a70efcbe85fe8d983f0e8bba18d812fd23731e76af611e018e7adb381bd0157062c1d09af4f8c44f1ec07295b2a687798ffab4ac4f9e9f4be7df15e7f77c8202e427f011d9d01087cf38faa3321e790ad9538152549bdca59f21f1847f7275993841b0550298ce24a72c6e520822bea06b294b0cbdeffda2fec2fcb6fb57e6ac3af3a09bc5ae6a71dcf22c166a4ecaa3d3b6bca0696726debcec8fc3e8f8e19ee576135985620df6bd73571578306404772947eeb1e3c93dd0c68a44b44c79d339f76356b4025232a28f3450f09d7e0c56657538d53c363e33378e46077cea3294fae6a6c0c4e37c2b1d476bca11cc1b9b3c276cd10f06f6483ea86d4e3fa9fda347ae5e82f229b8e059dba47b61ae3fc309c1313ee2b8d3ec2f7a7029de85a967e5fae9b28c073212b89f7e4b30aaef0b1003a70221ed6f24b632b8128cc5c7f39324d76e014f6a38460a3754ae9ac02f999fd1dc57f058dbe3970cdb247ae7f005386e5d989e58e98f89f7741c4b49352b9d38ebdef13a917ff334573a19c689563de2b8874bcecbf265e7542096d3500a06a5de3883d1fd45960cf9fb3ff9cf9f8bb3cbb2c06dd2cf57628135c1f9cc167334e8ca15efa59aa57521186757fc25a0f7446add947ceee9a45f0d9bed17b0b1f84a58ccec86e9d354eb80c437bfa1aa9ae89d984ee199f3bd818f77e0c0c731e4902481ec6e696133b73'
lsb = b'434c5341475f726f756e64000000000000000000000000000000000000000000c3aec646609114ab73d1fe4a9e4e53afea4c45c913513a796369c1d3c890c5f36430074a83b834cff7302253c10bbb3319e45cc9cefff3d62f5d209abe090edd171ee7d6af0df9fe2cb17fd99d4d45ceb68f1b28474547b592e86693977bf6a4c6aaac5c4cf689c2a4c32d1ff496011f5a412575f8a0ef06b333eb7d5803d73e81728f03c9ce53844c28200071a38ffc82bf3235e7d0fae161b841fb47acd44ec45a333a82cd9d5b91e9cd9b687856fa98f6c8f4c9b9f5186fe545192e121ef87aa59545acf057b0b94e25f495453819a426cca97645a18b21d450fa04e9f749390ead8cbe4910b1af2229c956dace85da17414db1fcbaef7817f30e07c6d20857f5a3c9d5eb9cb96b7f3d0eb561ad89ee6965ee7996a329a9b7b737355ecfe47b20ad0f25783f7280ae077cffbcfd290e24c7723a7ed5ce874a0232e60b9e8eae781c502340bc05f8641d02a5d0fe2db2c8e505ae0a52be374e1218eec4e538a490574db20f3e1e57c74df5921224ae172f6aa3872e4adb217e262f8886e4f01a3027292fc5e0a491dba7b190f53cadf88dc2d8d2253b6b2c020c63302a4f975d0c018d08da79dcd83c9eb8af9db6afd7e78cf41805221498b7962ea33fea00ad2af6aaa09af22db438a7f25174253c2ca51f341e18e8906539f0a875cdb8d842d83f8a125d3825d5447a8384825553a4500defba3d7b312266975890e65e006c546b93202a8f37b8e86303e2de02aace7f053451107be9fea8c60d5cb89d0be12921e1b74a7a449297e964629226be091d279d90c8bb26eeb32a3177f19bf701f7bf22602ddbefbab3bc9199a60203f95e5fdf5f082cbe9ff951a55ee8f3a1c5c274d199f31e6e95d2f1ee638de70b399238d8fb85dd80a72b9a5e05d18bed73934a70efcbe85fe8d983f0e8bba18d812fd23731e76af611e018e7adb381bd0157062c1d09af4f8c44f1ec07295b2a687798ffab4ac4f9e9f4be7df15e7f77c8202e427f011d9d01087cf38faa3321e790ad9538152549bdca59f21f1847f7275993841b0550298ce24a72c6e520822bea06b294b0cbdeffda2fec2fcb6fb57e6ac3af3a09bc5ae6a71dcf22c166a4ecaa3d3b6bca0696726debcec8fc3e8f8e19ee576135985620df6bd73571578306404772947eeb1e3c93dd0c68a44b44c79d339f76356b4025232a28f3450f09d7e0c56657538d53c363e33378e46077cea3294fae6a6c0c4e37c2b1d476bca11cc1b9b3c276cd10f06f6483ea86d4e3fa9fda347ae5e82f229b8e059dba47b61ae3fc309c1313ee2b8d3ec2f7a7029de85a967e5fae9b28c073212b89f7e4b30aaef0b1003a70221ed6f24b632b8128cc5c7f39324d76e014f6a38460a3754ae9ac02f999fd1dc57f058dbe3970cdb247ae7f005386e5d989e58e98f89f7741c4b49352b9d38ebdef13a917ff334573a19c689563de2b8874bcecbf265e7542096d3500a06a5de3883d1fd45960cf9fb3ff9cf9f8bb3cbb2c06dd2cf57628135c1f9cc167334e8ca15efa59aa57521186757fc25a0f7446add947ceee9a45f0d9bed17b0b1f84a58ccec86e9d354eb80c437bfa1aa9ae89d984ee199f3bd818f77e0c0c731e4902481ec6e696133b73'
print("Hash to scalar: ")
t1 = time.time()
print(cn_fast_hash(ls))
t2 = time.time()
print("Time to hash_to_scalar 2: " + str((t2-t1)*1000) + " ms")


import sha3 
t1 = time.time()
m = sha3.keccak_256()
m.update(binascii.a2b_hex(ls))
print("Hash to scalar 2: ")
print(m.hexdigest())
t2 = time.time()
print("Time to hash_to_scalar 2: " + str((t2-t1)*1000) + " ms")


ipdb.set_trace()


